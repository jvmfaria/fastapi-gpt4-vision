from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
import base64
import os
import json
import re
from dotenv import load_dotenv
from openai import OpenAI

# Carrega vari√°veis de ambiente
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app = FastAPI()

BASE_DIR = os.getenv("BASE_DIR", "./app/caracteristicas")

def carregar_caracteristicas():
    arquivos = {
        "oral": "oral.txt",
        "esquizoide": "esquizoide.txt",
        "masoquista": "masoquista.txt",
        "psicopata": "psicopata.txt",
        "rigido": "rigido.txt"
    }
    conteudos = []
    for traco, nome_arquivo in arquivos.items():
        caminho = os.path.join(BASE_DIR, nome_arquivo)
        if os.path.exists(caminho):
            with open(caminho, "r", encoding="utf-8") as f:
                conteudos.append(f"{traco.upper()}:\n{f.read().strip()}\n")
    return "\n".join(conteudos)

CARACTERISTICAS_TEXTO = carregar_caracteristicas()

def file_to_data_url(file: UploadFile) -> str:
    if file.content_type not in ["image/jpeg", "image/png"]:
        raise HTTPException(status_code=400, detail="Formato de imagem n√£o suportado.")
    content = file.file.read()
    if len(content) > 5 * 1024 * 1024:
        raise HTTPException(status_code=400, detail="Arquivo de imagem excede 5MB.")
    encoded = base64.b64encode(content).decode("utf-8")
    return f"data:{file.content_type};base64,{encoded}"

def formatar_mensagem(dados):
    partes = ["olhos", "boca", "tronco", "quadril", "pernas"]
    mensagem = ["üìä *An√°lise corporal completa por regi√£o*\n"]
    for parte in partes:
        bloco = dados.get(parte)
        if isinstance(bloco, dict):
            mensagem.append(f"\n*{parte.capitalize()}*")
            explicacao_geral = ""
            for traco in ["oral", "esquizoide", "psicopata", "masoquista", "rigido"]:
                ponto = bloco.get(traco, 0)
                explicacao = bloco.get("explicacao", "")
                if isinstance(explicacao, dict):
                    justificativa = explicacao.get(traco, "")
                    mensagem.append(f"‚Ä¢ {traco.capitalize()}: {ponto} ‚Äî {justificativa}")
                elif isinstance(explicacao, str):
                    explicacao_geral = explicacao
                    mensagem.append(f"‚Ä¢ {traco.capitalize()}: {ponto}")
            if explicacao_geral:
                mensagem.append(f"üîé Observa√ß√£o: {explicacao_geral}")
    mensagem.append("\nüß† *Total por tra√ßo*")
    for traco in ["oral", "esquizoide", "psicopata", "masoquista", "rigido"]:
        total = dados.get("soma_total_por_traco", {}).get(traco, 0)
        mensagem.append(f"‚Ä¢ {traco.capitalize()}: {total}")
    mensagem.append("\nüìå *Metodologia*: Corphus!")
    return "\n".join(mensagem)

@app.post("/classificar")
async def classificar(imagem: UploadFile = File(...)):
    try:
        image_data_url = file_to_data_url(imagem)

        prompt_instrucoes = (
            "Voc√™ √© um analista reichiano e especialista no m√©todo O Corpo Explica.\n"
            "A seguir est√£o as descri√ß√µes de refer√™ncia dos cinco tra√ßos de car√°ter (oral, esquizoide, psicopata, masoquista e r√≠gido). Elas est√£o organizadas com base em observa√ß√µes f√≠sicas e expressivas e devem ser usadas como crit√©rio principal para an√°lise:\n\n"
            f"{CARACTERISTICAS_TEXTO}\n"
            "Com base na imagem de corpo inteiro enviada, avalie **separadamente** as seguintes partes do corpo:\n"
            "- Olhos\n- Boca\n- Tronco\n- Quadril\n- Pernas\n\n"
            "Para cada parte, distribua exatamente **10 pontos** entre os cinco tra√ßos de car√°ter, com base nas caracter√≠sticas visuais observadas conforme descritas nos textos acima.\n\n"
            "‚ö†Ô∏è Regras obrigat√≥rias:\n"
            "- A soma das pontua√ß√µes dos cinco tra√ßos deve ser exatamente **10 por parte** (nem mais, nem menos).\n"
            "- Cada parte do corpo deve ser analisada **de forma independente**.\n"
            "- As distribui√ß√µes de pontos devem **variar entre as partes**, conforme os sinais e express√µes espec√≠ficos de cada regi√£o. N√£o repita a mesma distribui√ß√£o para todas as partes.\n"
            "- O uso das descri√ß√µes dos tra√ßos fornecidos √© **obrigat√≥rio** para justificar a pontua√ß√£o atribu√≠da.\n\n"
            "Para cada parte, forne√ßa tamb√©m uma explica√ß√£o separada para cada tra√ßo observado, dentro de um objeto JSON chamado 'explicacao'.\n"
            "O campo 'explicacao' deve conter um objeto com as chaves 'oral', 'esquizoide', 'psicopata', 'masoquista' e 'rigido', e os respectivos textos explicativos como valores.\n\n"
            "Ao final, forne√ßa a soma total por tra√ßo considerando todas as partes.\n"
            "Responda **exatamente** no seguinte formato JSON:\n"
            "{\n"
            "  \"olhos\": {\n"
            "    \"oral\": int, \"esquizoide\": int, ..., \"explicacao\": { \"oral\": \"...\", ... }\n"
            "  },\n"
            "  \"boca\": { ... },\n"
            "  \"tronco\": { ... },\n"
            "  \"quadril\": { ... },\n"
            "  \"pernas\": { ... },\n"
            "  \"soma_total_por_traco\": {\n"
            "    \"oral\": <soma>, \"esquizoide\": <soma>, ...\n"
            "  }\n"
            "}\n"
        )

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um analista reichiano e especialista no m√©todo O Corpo Explica."},
                {"role": "user", "content": prompt_instrucoes},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "Analise a imagem de corpo inteiro abaixo:"},
                        {"type": "image_url", "image_url": {"url": image_data_url}}
                    ]
                }
            ],
            temperature=0,
            max_tokens=2000
        )

        raw = response.choices[0].message.content

        try:
            cleaned_raw = re.sub(r"^```(?:json)?|```$", "", raw.strip(), flags=re.IGNORECASE).strip()
            resultado = json.loads(cleaned_raw)

            if not isinstance(resultado, dict):
                raise ValueError("Resposta JSON n√£o √© um dicion√°rio.")

            # Valida√ß√£o: soma dos tra√ßos por parte do corpo deve ser 10
            partes = ["olhos", "boca", "tronco", "quadril", "pernas"]
            tra√ßos = ["oral", "esquizoide", "psicopata", "masoquista", "rigido"]

            for parte in partes:
                bloco = resultado.get(parte)
                if isinstance(bloco, dict):
                    soma = sum(bloco.get(traco, 0) for traco in tra√ßos)
                    if soma != 10:
                        raise ValueError(f"A soma dos tra√ßos em '{parte}' √© {soma}, mas deveria ser 10.")

            mensagem = formatar_mensagem(resultado)
            return {
                "resultado": resultado,
                "mensagem": mensagem
            }

        except Exception as e:
            return {
                "erro": f"Erro ao interpretar resposta da OpenAI: {str(e)}",
                "resposta_bruta": raw
            }

    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/caracteristicas")
def obter_caracteristicas():
    return {"caracteristicas": CARACTERISTICAS_TEXTO}
