from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
import base64
import os
import json
import re
from dotenv import load_dotenv
from openai import OpenAI

# Carrega vari√°veis de ambiente
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app = FastAPI()

BASE_DIR = os.getenv("BASE_DIR", "./app/caracteristicas")

TRA√áOS = ["oral", "esquizoide", "psicopata", "masoquista", "rigido"]
PARTES = ["olhos", "boca", "tronco", "quadril", "pernas"]


def carregar_caracteristicas():
    arquivos = {traco: f"{traco}.txt" for traco in TRA√áOS}
    conteudos = []
    for traco, nome_arquivo in arquivos.items():
        caminho = os.path.join(BASE_DIR, nome_arquivo)
        if os.path.exists(caminho):
            with open(caminho, "r", encoding="utf-8") as f:
                conteudos.append(f"{traco.upper()}:\n{f.read().strip()}\n")
    return "\n".join(conteudos)

CARACTERISTICAS_TEXTO = carregar_caracteristicas()


def file_to_data_url(file: UploadFile) -> str:
    if file.content_type not in ["image/jpeg", "image/png"]:
        raise HTTPException(status_code=400, detail="Formato de imagem n√£o suportado.")
    content = file.file.read()
    if len(content) > 5 * 1024 * 1024:
        raise HTTPException(status_code=400, detail="Arquivo de imagem excede 5MB.")
    encoded = base64.b64encode(content).decode("utf-8")
    return f"data:{file.content_type};base64,{encoded}"


def formatar_mensagem(dados):
    mensagem = ["\U0001F4CA *An√°lise corporal completa por regi√£o*\n"]
    for parte in PARTES:
        bloco = dados.get(parte)
        if isinstance(bloco, dict):
            mensagem.append(f"\n*{parte.capitalize()}*")
            explicacao_geral = ""
            for traco in TRA√áOS:
                ponto = bloco.get(traco, 0)
                explicacao = bloco.get("explicacao", "")
                if isinstance(explicacao, dict):
                    justificativa = explicacao.get(traco, "")
                    mensagem.append(f"‚Ä¢ {traco.capitalize()}: {ponto} ‚Äî {justificativa}")
                elif isinstance(explicacao, str):
                    explicacao_geral = explicacao
                    mensagem.append(f"‚Ä¢ {traco.capitalize()}: {ponto}")
            if explicacao_geral:
                mensagem.append(f"\U0001F50E Observa√ß√£o: {explicacao_geral}")
    mensagem.append("\n\U0001F9E0 *Total por tra√ßo*")
    for traco in TRA√áOS:
        total = dados.get("soma_total_por_traco", {}).get(traco, 0)
        mensagem.append(f"‚Ä¢ {traco.capitalize()}: {total}")
    mensagem.append("\n\U0001F4CC *Metodologia*: Corphus!")
    return "\n".join(mensagem)


def gerar_prompt_relatorio(dados_classificacao, nome_cliente):
    return f"""
Voc√™ √© a assistente Lia ‚Äì Linguagem Integrativa de Autoconhecimento, da Corphus.

Com base na seguinte an√°lise de tra√ßos de car√°ter, construa um relat√≥rio completo e humanizado no estilo terap√™utico comportamental. Use linguagem sens√≠vel, motivadora e com base reichiana.

Nome do Cliente: {nome_cliente}

Dados da an√°lise (soma total por tra√ßo):
{json.dumps(dados_classificacao["soma_total_por_traco"], indent=2)}

Com base nesses dados, siga a estrutura abaixo:

1. Resumo Inicial
2. Dores e Recursos Identificados
3. Tra√ßos que Explicam seu Funcionamento
4. Padr√µes de Depend√™ncia Emocional
5. Escolhas Inconscientes
6. Impactos das Dores
7. Virada de Chave
8. Pr√≥ximos Passos
9. Conclus√£o

Finalize com a assinatura:
Com carinho,
Lia üíö
"""


@app.post("/classificar")
async def classificar(imagem: UploadFile = File(...)):
    try:
        image_data_url = file_to_data_url(imagem)

        prompt_instrucoes = f"""
Voc√™ √© um analista reichiano e especialista no m√©todo O Corpo Explica.
A seguir est√£o as descri√ß√µes de refer√™ncia dos cinco tra√ßos de car√°ter:

{CARACTERISTICAS_TEXTO}

Com base na imagem de corpo inteiro enviada, avalie separadamente as seguintes partes do corpo:
- Olhos
- Boca
- Tronco
- Quadril
- Pernas

Distribua exatamente 10 pontos entre os cinco tra√ßos para cada parte do corpo (olhos, boca, tronco, quadril e pernas).

‚ö†Ô∏è IMPORTANTE: Sua resposta deve ser obrigatoriamente no formato JSON v√°lido, com a seguinte estrutura:

{{
  "olhos": {{
    "oral": int,
    "esquizoide": int,
    "psicopata": int,
    "masoquista": int,
    "rigido": int,
    "explicacao": {{
      "oral": "texto...",
      "esquizoide": "texto...",
      "psicopata": "texto...",
      "masoquista": "texto...",
      "rigido": "texto..."
    }}
  }},
  ...
  "soma_total_por_traco": {{
    "oral": int,
    "esquizoide": int,
    "psicopata": int,
    "masoquista": int,
    "rigido": int
  }}
}}

N√£o explique fora do JSON. Apenas retorne o objeto diretamente.

Formato de resposta:
{{
  "olhos": {{ "oral": int, ..., "explicacao": {{ ... }} }},
  "boca": {{ ... }},
  ...
  "soma_total_por_traco": {{ "oral": soma, ... }}
}}
"""

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um analista reichiano e especialista no m√©todo O Corpo Explica."},
                {"role": "user", "content": prompt_instrucoes},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "Analise a imagem de corpo inteiro abaixo:"},
                        {"type": "image_url", "image_url": {"url": image_data_url}}
                    ]
                }
            ],
            temperature=0,
            max_tokens=2000
        )

        raw = response.choices[0].message.content or ""
cleaned_raw = re.sub(r"^```(?:json)?\s*|```$", "", raw.strip(), flags=re.IGNORECASE).strip()

try:
    resultado = json.loads(cleaned_raw)
except json.JSONDecodeError as e:
    raise ValueError(f"Falha ao decodificar JSON. Resposta recebida:
{cleaned_raw}")

        for parte in PARTES:
            bloco = resultado.get(parte)
            if isinstance(bloco, dict):
                soma = sum(bloco.get(traco, 0) for traco in TRA√áOS)
                if soma != 10:
                    raise ValueError(f"A soma dos tra√ßos em '{parte}' √© {soma}, mas deveria ser 10.")
                if all(bloco.get(traco, 0) == 0 for traco in TRA√áOS):
                    raise ValueError(f"A parte '{parte}' n√£o possui distribui√ß√£o significativa entre os tra√ßos. Distribua de forma coerente com os textos de refer√™ncia.")
                    raise ValueError(f"A soma dos tra√ßos em '{parte}' √© {soma}, mas deveria ser 10.")

        mensagem = formatar_mensagem(resultado)
        return {"resultado": resultado, "mensagem": mensagem}

    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)


@app.post("/gerar-relatorio")
async def gerar_relatorio(payload: dict):
    nome_cliente = payload.get("nome_cliente", "Cliente")
    dados_classificacao = payload.get("dados_classificacao")

    if not dados_classificacao:
        raise HTTPException(status_code=400, detail="Dados de classifica√ß√£o ausentes.")

    prompt = gerar_prompt_relatorio(dados_classificacao, nome_cliente)

    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "Voc√™ √© a assistente Lia, uma IA sens√≠vel e acolhedora."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.8,
        max_tokens=2500
    )

    return {"relatorio": response.choices[0].message.content}


@app.get("/caracteristicas")
def obter_caracteristicas():
    return {"caracteristicas": CARACTERISTICAS_TEXTO}
